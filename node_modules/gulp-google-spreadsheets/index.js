// Generated by CoffeeScript 1.9.2
(function() {
  var File, GoogleSpreadsheet, dashify, debug, es;

  debug = require('debug')('gulp-spreadsheets');

  es = require('event-stream');

  File = require('vinyl');

  GoogleSpreadsheet = require('google-spreadsheet');

  dashify = function(title) {
    return title.replace(/\W+/g, '-').toLowerCase();
  };

  module.exports = function(spreadsheetId) {
    var fetchRows, spreadsheet, stream;
    stream = new es.Stream();
    spreadsheet = new GoogleSpreadsheet(spreadsheetId);
    spreadsheet.getInfo(function(err, info) {
      var file, i, len, ref, worksheet;
      if (info == null) {
        info = {};
      }
      debug('loaded info for spreadsheet %s', spreadsheetId);
      if (err) {
        return stream.emit('error', err);
      }
      ref = info.worksheets || [];
      for (i = 0, len = ref.length; i < len; i++) {
        worksheet = ref[i];
        file = new File({
          path: dashify(worksheet.title) + '.json',
          contents: new Buffer('')
        });
        file.worksheet = worksheet;
        stream.emit('data', file);
      }
      return stream.emit('end');
    });
    fetchRows = function(file, callback) {
      return spreadsheet.getRows(file.worksheet.id, function(err, rows) {
        var i, len, row;
        if (rows == null) {
          rows = [];
        }
        debug('loaded worksheet "%s": %d rows', file.worksheet.title, rows.length);
        if (err) {
          return callback(err);
        }
        for (i = 0, len = rows.length; i < len; i++) {
          row = rows[i];
          delete row.content;
        }
        file.worksheet.rows = rows;
        file.contents = new Buffer(JSON.stringify(file.worksheet, null, '  '));
        return callback(null, file);
      });
    };
    return stream.pipe(es.map(fetchRows));
  };

}).call(this);
